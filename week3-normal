{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    },
    "colab": {
      "name": "Untitled.ipynb",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Alagappan-AI/ML-week3/blob/master/week3-normal\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XLChHnsaEPk7"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iul5hVZHEPlJ"
      },
      "source": [
        "df = pd.read_csv('https://raw.githubusercontent.com/Alagappan-AI/ML-week3/master/ex2data1.txt',header=None)\n",
        "df.columns = ['f1','f2','l']\n",
        "f1 = np.array(df.iloc[:,0])\n",
        "f2 = np.array(df.iloc[:,1])\n",
        "l = np.array(df.iloc[:,2])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zQAA3xheEPlX"
      },
      "source": [
        "f1.shape = [df.shape[0],1]\n",
        "f2.shape = [df.shape[0],1]\n",
        "l.shape = [df.shape[0],1]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "89CxcjcGEPlg",
        "outputId": "6c064ab0-487c-4419-f8f9-686fe4cf16f1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "zero_pts = df.iloc[:,:2][df['l']==0].values\n",
        "one_pts  = df.iloc[:,:2][df['l']==1].values\n",
        "plt.scatter(zero_pts[:,0],zero_pts[:,1])\n",
        "plt.scatter(one_pts[:,0],one_pts[:,1])\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "AsAy65NDEPlr",
        "outputId": "8cfa8e30-5287-4cb1-8ae8-8e1a2cbddb99",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "theta = np.zeros((3,1))\n",
        "theta"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.],\n",
              "       [0.],\n",
              "       [0.]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "Xx17ZK5HEPlz",
        "outputId": "49fb569b-b3a7-4fe6-8cf0-b3bdfae1d272",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "data = np.concatenate((f1,f2,np.ones((df.shape[0],1))),axis = 1)\n",
        "data.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(100, 3)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7B61hnFGEPl8"
      },
      "source": [
        "def predict(data,theta):\n",
        "    return np.dot(data,theta)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BjrXeUE8EPmG"
      },
      "source": [
        "def my_sigmoid(z):\n",
        "    return 1/(1+np.exp(-z))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xbHJPn9WEPmO"
      },
      "source": [
        "def cost_func(prediction,label,m):\n",
        "    return (-1/m) * np.sum(label * np.log(my_sigmoid(prediction)) + (1-label) * np.log(1 - my_sigmoid(prediction)))  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SJUyHnLAEPmW",
        "outputId": "77dcfa33-673d-407e-a445-f48d05e6deb9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# Cost at zero theta\n",
        "\n",
        "print(cost_func(predict(data,theta),l,df.shape[0]))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.6931471805599453\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ePJGkY37EPmf"
      },
      "source": [
        "def grad_desc(data, theta, prediction, label, m, alpha):\n",
        "    theta  = np.reshape(theta,(3,)) - (alpha/m) * np.sum((my_sigmoid(prediction)-label) * data, axis = 0)\n",
        "    return np.reshape(theta,(3,1))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MquTA0tyEPmm",
        "outputId": "4f43aa17-627d-400d-c095-b01c8d7903a6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "t = np.reshape(theta,(3,))\n",
        "k = t - [2,3.5,-0.77]\n",
        "np.reshape(k,(3,1))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-2.  ],\n",
              "       [-3.5 ],\n",
              "       [ 0.77]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xim3z3zEEPmu",
        "outputId": "35d88c3c-4d21-4c60-8b1e-3ed6d50bae6e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "theta = np.zeros((3,1))\n",
        "alpha = 0.001\n",
        "m = df.shape[0]\n",
        "cost_list = []\n",
        "i=0\n",
        "while(i < 6000000):\n",
        "    prediction = predict(data, theta)\n",
        "    cost = cost_func(prediction, l, m)\n",
        "    theta = grad_desc(data, theta, prediction, l, m, alpha)\n",
        "    i = i + 1\n",
        "\n",
        "print(cost)   "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.20383639006599397\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QEg_DZAtEPm2",
        "outputId": "5ef8dabf-9f32-4946-cbe4-df16fd649e65",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "theta"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[  0.19446967],\n",
              "       [  0.18956826],\n",
              "       [-23.69049025]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SWtCCbqLbUsZ",
        "outputId": "39e9757a-22ed-4428-9169-565f0854d797",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "my_sigmoid(predict([85,45,1],theta))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.79738073])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EUy-5FS6gBYj"
      },
      "source": [
        "predictions = my_sigmoid(predict(data,theta))\n",
        "\n",
        "predictions[predictions >= 0.5 ] = 1\n",
        "predictions[predictions < 0.5 ] = 0\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_shYilqUiXYr",
        "outputId": "cd4b061b-26ea-43c4-b21d-647c4dbde8fe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# Prediction Score\n",
        "\n",
        "np.sum(predictions == l)/len(l) * 100 "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "89.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v0iZivE2iq2N",
        "outputId": "139f9190-52a0-4609-ff19-3e749077be86",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "xpts = np.array([[float(min(f1))-2],[float(max(f1)+2)]])\n",
        "\n",
        "\n",
        "ypts = -1/float(theta[0]) * (float(theta[1])*xpts + float(theta[2]))\n",
        "\n",
        "plt.scatter(zero_pts[:,0],zero_pts[:,1])\n",
        "plt.scatter(one_pts[:,0],one_pts[:,1])\n",
        "plt.plot(xpts,ypts)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UUa4scREyF-v"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}